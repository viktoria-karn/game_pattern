class Game_pattern:
    def check_answer(self, right_answer, answer):
        if right_answer == answer:
            print("Это правильный ответ!")
            return 0
        else:
            print("Это неправильный ответ!")
            return 1
    def singleton_p(self):
        print("Очередной порождающий паттерн. С помощью него обеспечивается наличие единственного экземпляра класса"
              " с глобальной точкой доступа в однопоточном приложении.")
        print("Введите правильный ответ")
        right_answer = "singleton"
        answer = input()
        return right_answer, answer
    def builder_p(self):
        print("Полезный порождающий паттерн, который, по сути, является методом создания составного объекта."
              "Он дифференцирует сложный объект на конструирование и представление."
              "Благодаря этому при выполнении одной и той же операции конструирования вы можете "
              "получить разные представления.")
        print("Введите правильный ответ")
        right_answer = "builder"
        answer = input()
        return right_answer, answer

    def bridge_p(self):
        print("Разделяет абстракцию и реализацию таким образом, чтобы они могли меняться независимо."
              "Данный паттерн работает с помощью инкапсуляции, агрегирования и может применять наследование "
              "в целях распределения межклассовой ответственности.")
        print("Введите правильный ответ")
        right_answer = "bridge"
        answer = input()
        return right_answer, answer

    def decorator_p(self):
        print("Данный шаблон был сформирован для динамического подключения дополнительного поведения к объекту."
              "С его помощью практика создания подклассов получает гибкую альтернативу."
              "Это позволяет сделать функционал более широким.")
        print("Введите правильный ответ")
        right_answer = "decorator"
        answer = input()
        return right_answer, answer

    def adapter_p(self):
        print("Данный паттерн необходим для организации применения функций объекта, который нельзя модифицировать,"
              "посредством специального интерфейса.")
        print("Введите правильный ответ")
        right_answer = "adapter"
        answer = input()
        return right_answer, answer